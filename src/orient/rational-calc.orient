FastPorep:
  Utils:
    b_in_gb = (1024 * 1024 * 1024)
    secs_in_month = (24 * 30 * 60 * 60)

  Graph:
    nodes = (sector_size_gb * b_in_gb) / node_size 
    node_size_gb = node_size / b_in_gb 
    node_hash_size_gb = drg_parents * node_size_gb
    node_hash_size = node_hash_size_gb * b_in_gb
    challenge_periods_per_month = secs_in_month / polling_time

  Honest:
    Encoding:
      encoding_hashes_single_layer = nodes * drg_parents
      encoding_time = encoding_hashes_single_layer * hashing_time * drg_layers
      encoding_time_asic = encoding_time / hash_time_amax

    Response:
      response_honest = challenges * rig_storage_latency

    Throughput:
      num_parallel_encoding = rig_ram_gb * rig_size / sector_size_gb
      rig_cores = num_parallel_encoding
      seal_throughput = (sector_size_gb * num_parallel_encoding) / encoding_time

    SNARK:
      inclusion_proofs = merkle_tree_hash_circuit * log2(nodes)
      sequential_proofs = cipher_circuit
      porep_snark_constraints = (sequential_proofs + inclusion_proofs) * challenges
      porep_snark_partitions = porep_snark_constraints / max_snark_constraints
      porep_snark_size = porep_snark_partitions * snark_size
      porep_snark_size_kb = porep_snark_size / 1024

    Cost:
      Compute:
        nodes_per_second = hash_gb_per_second / node_hash_size_gb
        nodes_per_year = nodes_per_second * (60 * 60 * 24 * 365)
        node_hash_cost = rig_cost_per_year / nodes_per_year 
        cost_single_node_encoding = node_hash_cost

      Storage:
        cost_storage_gbs = cost_gb_per_month / secs_in_month 
        cost_storage_sector_polling_time = cost_storage_gbs * (sector_size_gb * (polling_time + extra_storage_time))


  Adversary:
    Rationality:
      describe(breakeven_nodes, "number of nodes / sector / challenge period after which it's cheaper to pay store the entire sector, than re-encode those")
      breakeven_nodes = ((cost_gb_per_month *  sector_size_gb) / (cost_single_node_encoding * challenge_periods_per_month))
      regeneration_percentage = breakeven_nodes / nodes

    Sequentiality:
      response_amax = response_malicious / polling_time
      node_gen_path = drg_d * nodes
      node_gen_time = (node_gen_path * drg_parents * hashing_time) / hashing_amax
      response_malicious = node_gen_time * challenges

