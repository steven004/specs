import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import exitcode "github.com/filecoin-project/specs/systems/filecoin_vm/runtime/exitcode"
import ipld "github.com/filecoin-project/specs/libraries/ipld"
import msg "github.com/filecoin-project/specs/systems/filecoin_vm/message"

// Randomness is a string of random bytes
type Randomness Bytes

// Runtime is the VM's internal runtime object.
// this is everything that is accessible to actors, beyond parameters.
// FKA as vm.Context
type Runtime interface {
    CurrEpoch() block.ChainEpoch

    // Randomness returns a (pseudo)random stream (indexed by offset) for the current epoch.
    Randomness(e block.ChainEpoch, offset UInt) Randomness

    // Note: This is the _immediate_ caller.
    // Not necessarily the actor in the From field of the initial on-chain Message.
    ImmediateCaller() addr.Address
    ValidateImmediateCallerIs(caller addr.Address)
    ValidateImmediateCallerAcceptAny()
    ValidateImmediateCallerMatches(CallerPattern)

    CurrMethodNum()             actor.MethodNum

    // Note: This is the actor in the From field of the initial on-chain message.
    // Not necessarily the immediate caller.
    ToplevelSender()            addr.Address

    // The actor who mined the block in which the initial on-chain message appears.
    ToplevelBlockWinner()       addr.Address

    // Top-level call sequence number of the "From" actor in the initial on-chain message.
    ToplevelSenderCallSeqNum()  actor.CallSeqNum

    // Sequence number representing the total number of calls (to any actor, any method)
    // during the current top-level message execution.
    // Note: resets with every top-level message, and therefore not necessarily monotonic.
    InternalCallSeqNum()        actor.CallSeqNum

    AcquireState()              ActorStateHandle

    SuccessReturn()             msg.InvocOutput
    ValueReturn(Bytes)          msg.InvocOutput
    ErrorReturn(exitCode exitcode.ExitCode) msg.InvocOutput

    // Throw an error indicating a failure condition has occurred, from which the given actor
    // code is unable to recover. If an error is thrown in actor code, and not handled by any
    // of its callers, then the VM will not apply the state transition.
    //
    // Note: this should only be used for exceptional conditions, such as inconsistent state
    // values or precondition violations. Operations that may fail during normal execution
    // should use error return values, not call this method.
    Abort(string)

    // Check that the given condition is true (and call Abort if not).
    Assert(bool)

    CurrentBalance()  actor.TokenAmount
    ValueReceived()   actor.TokenAmount

    // Send allows the current execution context to invoke methods on other actors in the system.
    SendPropagatingErrors(input msg.InvocInput) msg.InvocOutput
    SendCatchingErrors(input msg.InvocInput) msg.InvocOutput

    // Create an actor in the state tree. May only be called by InitActor.
    CreateActor(
        stateCID           actor.ActorSystemStateCID
        a                  addr.Address
        initBalance        actor.TokenAmount
        constructorParams  actor.MethodParams
    )

    IpldGet(c ipld.CID) union {Bytes, error}
    IpldPut(x ipld.Object) ipld.CID
}
