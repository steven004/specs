import libp2p "github.com/filecoin-project/specs/libraries/libp2p"
import sealing "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import address "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import poster "github.com/filecoin-project/specs/systems/filecoin_mining/storage_proving/poster"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"

type SectorExpirationQueueItem struct {
    SectorNumber  sector.SectorNumber
    Expiration    block.ChainEpoch
}

type SectorExpirationQueue struct {
    Add(i SectorExpirationQueueItem)
    Pop() SectorExpirationQueueItem
    Peek() SectorExpirationQueueItem
    Remove(n sector.SectorNumber)
}

type SectorTable struct {
    SectorSize         sector.SectorSize
    ActiveSectors      sector.CompactSectorSet
    CommittedSectors   sector.CompactSectorSet
    RecoveringSectors  sector.CompactSectorSet
    FailingSectors     sector.CompactSectorSet

    // transient State that get reset on every constructPowerReport
    TerminatedFaults   sector.CompactSectorSet
}

type StagedCommittedSectorInfo struct {
    Sector       SectorOnChainInfo
    Utilization  sector.SectorUtilizationInfo
}

type SectorOnChainInfo struct {
    SealCommitment  sector.SealCommitment
    State           SectorState
}

type ChallengeStatus struct {
    LastChallengeEpoch     block.ChainEpoch  // get updated by NotifyOfPoStChallenge
    LastChallengeEndEpoch  block.ChainEpoch  // get updated upon successful submitPoSt

    IsChallenged()         bool
}

type PreCommittedSector struct {
    Info           sealing.SectorPreCommitInfo
    ReceivedEpoch  block.ChainEpoch
}

type PreCommittedSectorsAMT {sector.SectorNumber: PreCommittedSector}
type StagedCommittedSectorAMT {sector.SectorNumber: StagedCommittedSectorInfo}
type SectorsAMT {sector.SectorNumber: SectorOnChainInfo}
// map from SectorNumber to amout of storage in active deals
type SectorUtilizationAMT {sector.SectorNumber: sector.SectorUtilizationInfo}

type StorageMinerActorState struct {
    PreCommittedSectors        PreCommittedSectorsAMT
    StagedCommittedSectors     StagedCommittedSectorAMT
    Sectors                    SectorsAMT
    SectorUtilization          SectorUtilizationAMT
    ProvingSet                 sector.CompactSectorSet

    SectorTable
    SectorExpirationQueue
    ChallengeStatus

    // contains mostly static info about this miner
    Info                       &MinerInfo

    // No DeclareFaults and CommitSector can happen when SM is in the isChallenged state
    _isChallenged(rt Runtime)  bool
    _isSealVerificationCorrect(rt Runtime, onChainInfo sector.OnChainSealVerifyInfo) bool
    _sectorExists(sectorNo sector.SectorNumber) bool

    _updateFailSector(
        rt                   Runtime
        sectorNo             sector.SectorNumber
        incrementFaultCount  bool
    )
    _updateExpireSectors(rt Runtime)
    _processStagedCommittedSectors(rt Runtime)
    _updateClearSector(rt Runtime, sectorNo sector.SectorNumber)
    _updateActivateSector(rt Runtime, sectorNo sector.SectorNumber)
    _updateSectorUtilization(rt Runtime) [deal.DealID]
    _initializeUtilizationInfo(rt Runtime, dealIDs [deal.DealID]) sector.SectorUtilizationInfo

    _slashDealsFromFaultReport(
        rt             Runtime
        sectorNumbers  [sector.SectorNumber]
        action         deal.StorageDealSlashAction
    )
    _getActivePower(rt Runtime) block.StoragePower
    _getInactivePower(rt Runtime) block.StoragePower
}

type StorageMinerActorCode struct {
    NotifyOfPoStChallenge(rt Runtime)

    PreCommitSector(rt Runtime, info sector.SectorPreCommitInfo)  // TODO: check with Magik on sizes
    ProveCommitSector(rt Runtime, info sector.SectorProveCommitInfo)

    SubmitPoSt(rt Runtime, postSubmission poster.PoStSubmission)

    CheckPoStSubmissionHappened(rt Runtime)

    // TODO: should depledge be in here or in storage market actor?

    DeclareFaults(rt Runtime, failingSet sector.CompactSectorSet)

    RecoverFaults(rt Runtime, recoveringSet sector.CompactSectorSet)

    // get active deals and last challenge end epoch
    // will fail if the sector is in Failing, Recovering, or Committed state or not found
    // Send ProcessBatchDealPayment to StorageMarketActor
    CreditSectorDealPayment(rt Runtime, sectorNo sector.SectorNumber)

    _onMissedPoSt(rt Runtime)

    _submitFaultReport(
        rt          Runtime
        declared    sector.CompactSectorSet
        detected    sector.CompactSectorSet
        terminated  sector.CompactSectorSet
    )
    _submitPowerReport(rt Runtime)

    _verifyPoStSubmission(rt Runtime, postSubmission poster.PoStSubmission) bool

    _expirePreCommittedSectors(rt Runtime)
}

type MinerInfo struct {
    // Account that owns this miner.
    // - Income and returned collateral are paid to this address.
    // - This address is also allowed to change the worker address for the miner.
    Owner           address.Address

    // Worker account for this miner.
    // This will be the key that is used to sign blocks created by this miner, and
    // sign messages sent on behalf of this miner to commit sectors, submit PoSts, and
    // other day to day miner activities.
    Worker          address.Address

    // Libp2p identity that should be used when connecting to this miner.
    PeerId          libp2p.PeerID

    // Amount of space in each sector committed to the network by this miner.
    SectorSize      util.BytesAmount
    SubsectorCount  UVarint
    Partitions      UVarint
}
