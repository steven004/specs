import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"

type StorageParticipantBalance struct {
    Locked     actor.TokenAmount
    Available  actor.TokenAmount
}

type BalancesHAMT {addr.Address: StorageParticipantBalance}
type DealsAMT {deal.DealID: deal.StorageDeal}

type StorageMarketActorState struct {
    Balances  BalancesHAMT
    Deals     DealsAMT

    // generate storage deal id
    _generateStorageDealID(rt Runtime, deal deal.StorageDeal) deal.DealID

    // check if StorageDeal is signed before expiry
    // check if StorageDeal has the right signatures
    // check if minimum StoragePrice and StorageCollateral are met
    // check if provider and client have sufficient balances
    _validateNewStorageDeal(rt Runtime, deal deal.StorageDeal) bool

    _lockFundsForStorageDeal(rt Runtime, deal deal.StorageDeal)
    _processStorageDealPayment(rt Runtime, deal deal.StorageDeal, duration block.ChainEpoch)
    _settleExpiredStorageDeal(rt Runtime, deal deal.StorageDeal)
    _slashLockedFunds(rt Runtime, amount actor.TokenAmount)

    _lockBalance(rt Runtime, addr addr.Address, amount actor.TokenAmount)
    _unlockBalance(rt Runtime, addr addr.Address, amount actor.TokenAmount)
    _transferBalance(
        rt           Runtime
        fromLocked   addr.Address
        toAvailable  addr.Address
        amount       actor.TokenAmount
    )
    _isBalanceAvailable(a addr.Address, amount actor.TokenAmount) bool
}

type StorageMarketActorCode struct {
    WithdrawBalance(rt Runtime, balance actor.TokenAmount)
    AddBalance(rt Runtime)  // amount is in the message

    // call by CommitSector in StorageMiningSubsystem
    // a StorageDeal is only published on chain when it passes verifyStorageDeal
    // a DealID will be assigned and stored in the mapping of DealID to StorageDeal
    // PublishStorageDeal should be called before SecotrCommits
    // an unregistered StorageDeal will not be processed
    PublishStorageDeals(rt Runtime, deals [deal.StorageDeal]) [PublishStorageDealResponse]

    // call by CronActor when no PoSt is submitted within a ProvingPeriod
    // trigger subsequent calls on different SectorSet
    // pull SectorSet from the run time
    HandleCronAction(rt Runtime)

    // call by CronActor / onPoStSubmission on ExpiredSet
    // remove StorageDeal from StorageMarketActor
    // if no more active deals contain in the sector
    // return StorageCollateral to miners
    SettleExpiredDeals(rt Runtime, dealIDs [deal.DealID])

    // call by CronActor / onPoStSubmission on ActiveSet to process deal payment
    // go through StorageDealIDs, if IDs are active in MarketActor
    // payment will be processed
    ProcessStorageDealsPayment(rt Runtime, dealIDs [deal.DealID], duration block.ChainEpoch)

    // call by CronActor / on DeclareFault on FaultSet to slash deal collateral
    // Deals should be slashed for a single proving period
    SlashStorageDealsCollateral(rt Runtime, dealIDs [deal.DealID])

    GetInitialUtilizationInfo(rt Runtime, dealIDs [deal.DealID]) deal.UtilizationInfo

    // TODO: StorageDeals should be renewable
    // UpdateStorageDeal(newStorageDeals [deal.StorageDeal])

    GetPieceInfosForDealIDs(rt Runtime, dealIDs [deal.DealID]) [sector.PieceInfo]
}
