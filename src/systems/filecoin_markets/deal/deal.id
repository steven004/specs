import ipld "github.com/filecoin-project/specs/libraries/ipld"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"
import msg "github.com/filecoin-project/specs/systems/filecoin_vm/message"

type DealID UVarint
type DealCID ipld.CID
type ProposalCID ipld.CID
type PayloadCID ipld.CID
type Signature struct {}  // TODO

// Note: Deal Collateral is only released and returned to clients and miners
// when the storage deal stops counting towards power. In the current iteration,
// it will be released when the sector containing the storage deals expires,
// even though some storage deals can expire earlier than the sector does.
// Collaterals are denominated in PerEpoch to incur a cost for self dealing or
// minimal deals that last for a long time.
// TODO: ClientCollateralPerEpoch may not be needed and removed pending future confirmation.
// TODO: StoragePrice is paid out by Epoch duration but the exact mechanics still lacks some details.
// There will be a Minimum value for both client and provider deal collateral.
type StorageDealProposal struct {
    PieceCID                      piece.PieceCID  // 35 bytes CommP
    PieceSize                     piece.PieceSize
    Client                        addr.Address
    Provider                      addr.Address
    ClientSignature               Signature

    StartEpoch                    block.ChainEpoch  // a deal is invalid if it is published to the chain after StartEpoch
    EndEpoch                      block.ChainEpoch
    StoragePricePerEpoch          actor.TokenAmount
    ProviderCollateralPerEpoch    actor.TokenAmount
    ClientCollateralPerEpoch      actor.TokenAmount  // potentially collapse into one with ProviderDealCollateral

    ClientBalanceRequirement()    actor.TokenAmount  // (ClientCollateralPerEpoch + StoragePricePerEpoch) * (EndEpoch - StartEpoch)
    TotalStorageFee()             actor.TokenAmount  // StoragePricePerEpoch * (EndEpoch - StartEpoch)
    TotalClientCollateral()       actor.TokenAmount  // ClientCollateralPerEpoch * Duration
    ProviderBalanceRequirement()  actor.TokenAmount  // ProviderCollateralPerEpoch * (EndEpoch - StartEpoch)
    Duration()                    block.ChainEpoch

    CID()                         ProposalCID
}

// Everything in this struct will go on chain
// We are enforcing that StorageProvider calls PublishStorageDeal to get back a StorageDeal struct
// Provider's signature is implicit in the onchain call
type StorageDeal struct {
    Proposal()       StorageDealProposal  // can extract proposal from the message
    ProposalMessage  msg.Message  // counter signature is implicit in the message
    ID               DealID

    CID()            DealCID
}

type StorageDealTally struct {
    ProviderCollateralRemaining              actor.TokenAmount
    LockedStorageFee                         actor.TokenAmount
    UnlockedStorageFee                       actor.TokenAmount
    LastPaymentEpoch                         block.ChainEpoch

    UnlockStorageFee(fee actor.TokenAmount)  bool
}

type DealExpirationQueueItem struct {
    DealID
    PayloadPower  block.StoragePower
    Expiration    block.ChainEpoch
}

// PriorityQueue of Deals in a Sector
// sorted by ascending order of EndEpoch (expiration)
// first expiring deal is on top
type DealExpirationQueue struct {
    Add(i DealExpirationQueueItem)
    Pop() DealExpirationQueueItem
    Peek() DealExpirationQueueItem
    Remove(d DealID)

    ActiveDealIDs()       CompactDealSet
    LastDealExpiration()  block.ChainEpoch
    Size()                int
}

type RetrievalDealProposal struct {}  // TODO
type RetrievalDeal struct {
    Proposal          RetrievalDealProposal
    CounterSignature  Signature
}
